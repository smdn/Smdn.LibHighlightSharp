<!--
SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project>
  <PropertyGroup>
    <BeforePack>$(BeforePack);NativeBinaries_PopulatePackItems;NativeBinaries_CheckSHA1SUMS</BeforePack>
  </PropertyGroup>

  <Target Name="NativeBinaries_PrepareBuildForAllTargetEnvironments">
    <Exec
      Command="make copy-runtime-deps -f deps.mk"
      WorkingDirectory="$(Highlight_MakefileDirectory)"
    />
  </Target>

  <Target Name="NativeBinaries_PrepareBuildForTargetOrHostEnvironment">
    <CallTarget Targets="NativeBinaries_GetRuntimeIdentifierForTargetOrHostEnvironment">
      <Output TaskParameter="TargetOutputs" PropertyName="_TargetOrHostRid"/>
    </CallTarget>

    <PropertyGroup>
      <Lua_DllFilePath>$(Highlight_NativeBinariesBaseDirectory)$(_TargetOrHostRid)\native\$(Lua_DllFileName)</Lua_DllFilePath>
    </PropertyGroup>

    <Exec
      Command="make copy-runtime-deps-$(_TargetOrHostRid) -f deps.mk"
      WorkingDirectory="$(Highlight_MakefileDirectory)"
      IgnoreExitCode="true"
      Condition="$(_TargetOrHostRid.StartsWith('win-'))"
    >
      <Output TaskParameter="ExitCode" PropertyName="_MakeCopyRuntimeDepsExitCode"/>
    </Exec>

    <PropertyGroup>
      <_MakeCopyRuntimeDepsResult>false</_MakeCopyRuntimeDepsResult>
      <_MakeCopyRuntimeDepsResult Condition=" '$(_MakeCopyRuntimeDepsExitCode)' == '' ">true</_MakeCopyRuntimeDepsResult>
      <_MakeCopyRuntimeDepsResult Condition=" '$(_MakeCopyRuntimeDepsExitCode)' == '0' ">true</_MakeCopyRuntimeDepsResult>
      <_MakeCopyRuntimeDepsResult Condition=" '$(_MakeCopyRuntimeDepsExitCode)' == '-1' ">true</_MakeCopyRuntimeDepsResult>
    </PropertyGroup>

    <Warning
      Text="Please extract and deploy the depending files manually since it could not be extracted or deployed automatically."
      Condition=" '$(_MakeCopyRuntimeDepsResult)' != 'true' and !Exists($(Lua_DllFilePath)) "
    />
  </Target>

  <Target
    Name="NativeBinaries_GetNativeBinaryFilesForTargetOrHostEnvironment"
    Returns="@(_NativeBinaryFileForTargetOrHostEnvironment)"
  >
    <CallTarget Targets="NativeBinaries_GetRuntimeIdentifierForTargetOrHostEnvironment">
      <Output TaskParameter="TargetOutputs" PropertyName="_TargetOrHostRid"/>
    </CallTarget>

    <ItemGroup Condition=" '$(_TargetOrHostRid)' != '' ">
      <_NativeBinaryFileForTargetOrHostEnvironmentInRelativePath
        Include="%(Highlight_NativeBinaryFileRelativePath.Identity)"
        Condition=" $([System.String]::new(%(Highlight_NativeBinaryFileRelativePath.Identity)).StartsWith('$(_TargetOrHostRid)')) "
      />
      <_NativeBinaryFileForTargetOrHostEnvironment
        Include="$(Highlight_NativeBinariesBaseDirectory)%(_NativeBinaryFileForTargetOrHostEnvironmentInRelativePath.Identity)"
      />
    </ItemGroup>
  </Target>

  <Target
    Name="NativeBinaries_PopulateBuildItems"
    BeforeTargets="BeforeBuild"
    DependsOnTargets="NativeBinaries_PrepareBuildForTargetOrHostEnvironment"
    Condition=" '$(TargetFramework)' != '' "
  >
    <CallTarget Targets="NativeBinaries_GetNativeBinaryFilesForTargetOrHostEnvironment">
      <Output TaskParameter="TargetOutputs" ItemName="_NativeBinaryFile"/>
    </CallTarget>

    <ItemGroup>
      <Content
        Include="@(_NativeBinaryFile)"
        TargetPath="%(FileName)%(Extension)"
        CopyToOutputDirectory="PreserveNewest"
        Pack="false"
      />
    </ItemGroup>
  </Target>

  <Target
    Name="NativeBinaries_PopulatePackItems"
    DependsOnTargets="NativeBinaries_PrepareBuildForAllTargetEnvironments"
  >
    <ItemGroup>
      <_NativeBinaryPackFile
        Include="$(Highlight_NativeBinariesBaseDirectory)%(Highlight_NativeBinaryFileRelativePath.Identity)"
        PackagePath="runtimes\%(Highlight_NativeBinaryFileRelativePath.Identity)"
      />

      <None
        Include="%(_NativeBinaryPackFile.Identity)"
        Pack="true"
        PackagePath="%(_NativeBinaryPackFile.PackagePath)"
      />
    </ItemGroup>
  </Target>

  <Target Name="NativeBinaries_CheckSHA1SUMS">
    <Exec
      Command="sha1sum --check '$(Highlight_NativeBinariesSHA1SumFile)'"
      WorkingDirectory="$([System.IO.Path]::GetDirectoryName('$(Highlight_NativeBinariesSHA1SumFile)'))"
    />
  </Target>

  <!--
    This target only works if built by ProjectReference (if IsBuildDueToProjectReference is set to 'true'), and copies
    a native binary file to the output directory of the referrer project.
  -->
  <Target
    Name="NativeBinaries_AddCopyToOutputDirectoryItems"
    BeforeTargets="GetCopyToOutputDirectoryItems;GetCopyToPublishDirectoryItems"
    DependsOnTargets="NativeBinaries_PrepareBuildForTargetOrHostEnvironment"
    Condition=" '$(IsBuildDueToProjectReference)' == 'true' "
  >
    <CallTarget Targets="NativeBinaries_GetNativeBinaryFilesForTargetOrHostEnvironment">
      <Output TaskParameter="TargetOutputs" ItemName="_NativeBinaryFile"/>
    </CallTarget>

    <ItemGroup>
      <_OutputFile Include="@(_NativeBinaryFile)">
        <TargetPath>%(FileName)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </_OutputFile>

      <AllItemsFullPathWithTargetPath Include="@(_OutputFile)" />
      <AllPublishItemsFullPathWithTargetPath Include="@(_OutputFile)" />
    </ItemGroup>
  </Target>

  <Target
    Name="NativeBinaries_GetRuntimeIdentifierForTargetOrHostEnvironment"
    Returns="$(_TargetOrHostRuntimeIdentifier)"
  >
    <PropertyGroup Condition=" '$(RuntimeIdentifier)' == '' ">
      <_HostPlatform Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux</_HostPlatform>
      <_HostPlatform Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</_HostPlatform>
      <_HostPlatform Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</_HostPlatform>

      <!-- set more specific RID -->
      <!-- RuntimeInformation.RuntimeIdentifier on >= .NET 8 return 'linux-x64' instead of 'ubuntu.22.04-x64'. -->
      <_HostPlatform
        Condition="
          '$(_HostPlatform)' == 'linux' and (
            $([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier.StartsWith('ubuntu.22.04')) or
            $([System.Runtime.InteropServices.RuntimeInformation]::OSDescription.StartsWith('Ubuntu 22.04'))
          )
        "
      >ubuntu.22.04</_HostPlatform>
      <_HostPlatform
        Condition="
          '$(_HostPlatform)' == 'linux' and (
            $([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier.StartsWith('ubuntu.20.04')) or
            $([System.Runtime.InteropServices.RuntimeInformation]::OSDescription.StartsWith('Ubuntu 20.04'))
          )
        "
      >ubuntu.20.04</_HostPlatform>

      <_HostArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</_HostArchitecture>
      <_HostArchitecture Condition=" '$(_HostArchitecture)' == 'arm' " >arm32</_HostArchitecture>
      <_HostArchitecture Condition=" '$(_HostArchitecture)' == 'arm64' " >arm64</_HostArchitecture>
      <_HostArchitecture Condition=" '$(_HostArchitecture)' == 'x86' " >x86</_HostArchitecture>
      <_HostArchitecture Condition=" '$(_HostArchitecture)' == 'x64' " >x64</_HostArchitecture>

      <_HostRuntimeIdentifier>$(_HostPlatform)-$(_HostArchitecture)</_HostRuntimeIdentifier>
    </PropertyGroup>

    <PropertyGroup>
      <_TargetOrHostRuntimeIdentifier>$(RuntimeIdentifier)</_TargetOrHostRuntimeIdentifier>
      <_TargetOrHostRuntimeIdentifier Condition=" '$(_TargetOrHostRuntimeIdentifier)' == '' ">$(_HostRuntimeIdentifier)</_TargetOrHostRuntimeIdentifier>
    </PropertyGroup>
  </Target>
</Project>

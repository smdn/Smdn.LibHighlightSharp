<!--
SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <_PackageVersionPatch>0</_PackageVersionPatch>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>net6.0;netstandard2.1;netstandard2.0</TargetFrameworks><!-- System.Runtime.InteropServices.HandleRef is available in .NET Standard 2.0 or over -->
    <RuntimeIdentifiers>$(Highlight_NativeBinariesSupportedRuntimeIdentifiers)</RuntimeIdentifiers>
    <VersionPrefix>$(Highlight_SourceVersionMajorMinor).$(_PackageVersionPatch)</VersionPrefix>
    <VersionSuffix></VersionSuffix>
    <RootNamespace/> <!-- empty the root namespace so that the namespace is determined only by the directory name, for code style rule IDE0030 -->
    <PackageValidationBaselineVersion>3.36.0</PackageValidationBaselineVersion>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems> <!-- explicitly specify the items to be included to @Compile -->
    <Nullable>warnings</Nullable> <!-- The nullability annotations have to be enabled separately in each file since SWIG bindings does not have nullability annotations -->
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <BuildInParallel>false</BuildInParallel> <!-- disable parallel builds to avoid running simultaneous native binary build -->
    <AssemblyCLSCompliant>false</AssemblyCLSCompliant>
    <GenerateNupkgReadmeFileDependsOnTargets>$(GenerateNupkgReadmeFileDependsOnTargets);FormatPackageReadmeFileContent</GenerateNupkgReadmeFileDependsOnTargets>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(AssemblyVersionForReferenceBySmdnLibHighlightSharp)' != '' ">
    <!--
      Smdn.LibHighlightSharp must support for multiple versions of Smdn.LibHighlightSharp.Bindings,
      so the version of the reference assembly must also be the minimum.

      If a value is set for AssemblyVersionForReferenceBySmdnLibHighlightSharp when built from Smdn.LibHighlightSharp,
      set that value as an assembly version temporarily and build Smdn.LibHighlightSharp.Bindings.

      This setting will result building Smdn.LibHighlightSharp that references the
      minimum version of Smdn.LibHighlightSharp.Bindings.
    -->
    <AssemblyVersion>$(AssemblyVersionForReferenceBySmdnLibHighlightSharp)</AssemblyVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Include *.cs files from directly under the directory for the namespace Smdn.LibHighlightSharp. -->
    <Compile Include="Smdn.LibHighlightSharp\*.cs" />
    <!-- Include *.cs files from directly under the directory for the bindings generated from specific Highlight version. -->
    <Compile Include="$(Highlight_BindingsSourceDirectory)\*.cs" />

    <None
      Include="$(Highlight_NativeBinariesSHA1SumFile)"
      Pack="true"
      PackagePath="libhighlight\SHA1SUMS.txt"
    />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Runtime.InteropServices.RuntimeInformation" />
  </ItemGroup>

  <PropertyGroup Label="assembly attributes">
    <Description>Provides `libhighlight`, the [$(Highlight_DisplayNameWithVersion)]($(Highlight_ProjectUrl)) native library for various platforms, and the managed bindings for it.</Description>
    <CopyrightYear>2022</CopyrightYear>
  </PropertyGroup>

  <PropertyGroup Label="package properties">
    <PackageTags>$(PackageTags);native;bindings;libhighlight</PackageTags>
  </PropertyGroup>

  <Target Name="FormatPackageReadmeFileContent">
    <ItemGroup>
      <_SupportedRuntimeIdentifier Include="$(Highlight_NativeBinariesSupportedRuntimeIdentifiers)" />
      <_SupportedRuntimeIdentifierMarkdownList Include="- `%(_SupportedRuntimeIdentifier.Identity)`" />
    </ItemGroup>

    <PropertyGroup>
      <PackageReadmeFileContent><![CDATA[# $(AssemblyName)-$(InformationalVersion)
## Native libraries
This package provides [$(Highlight_DisplayNameWithVersion)]($(Highlight_ProjectUrl)) native libraries for the platforms represented by the following [RID](https://learn.microsoft.com/dotnet/core/rid-catalog)s.
@(_SupportedRuntimeIdentifierMarkdownList, '%0A')

Also note that this package provides the Lua DLL (for Windows only).

## .NET bindings
This package also provides .NET bindings for the native libraries descrived above.

All types under the namespace `$(Highlight_BindingsNamespace)` are automatically generated by SWIG, without any other modifications.
]]></PackageReadmeFileContent>
    </PropertyGroup>
  </Target>

  <PropertyGroup Label="notice and readme">
    <LicenseNoticeMarkdownText><![CDATA[
# NOTICE
$(LicenseNoticeMarkdownText_Highlight_Bundle)
$(LicenseNoticeMarkdownText_Lua_Bundle)
]]></LicenseNoticeMarkdownText>
  </PropertyGroup>

  <Target
    Name="BuildConfigurations_Generate"
    BeforeTargets="BeforeBuild"
    DependsOnTargets="Highlight_PrepareHighlightBuildConfigurationsFile"
  />

  <Target
    Name="WarnAssemblyVersionForBuild"
    BeforeTargets="DispatchToInnerBuilds;BeforeBuild"
    Condition=" '$(AssemblyVersionForReferenceBySmdnLibHighlightSharp)' != '' "
  >
    <Warning Text="Build for AssemblyVersion $(AssemblyVersion)" />
  </Target>

  <ImportGroup>
    <Import Project="$(MSBuildThisFileDirectory)Bindings.targets" />
    <Import Project="$(MSBuildThisFileDirectory)NativeBinaries.targets" />
  </ImportGroup>
</Project>

<!--
SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project>
  <Target
    Name="Highlight_CheckoutHighlightSource"
    Condition="!Exists($(Highlight_SourceRootDirectory))"
  >
    <Exec
      Command="make highlight-src -f libhighlight.mk"
      IgnoreExitCode="true"
      WorkingDirectory="$(Highlight_MakefileDirectory)"
    >
      <Output TaskParameter="ExitCode" PropertyName="_MakeHighlightSrcExitCode"/>
    </Exec>

    <PropertyGroup>
      <_MakeHighlightSrcResult>false</_MakeHighlightSrcResult>
      <_MakeHighlightSrcResult Condition=" '$(_MakeHighlightSrcExitCode)' == '' ">true</_MakeHighlightSrcResult>
      <_MakeHighlightSrcResult Condition=" '$(_MakeHighlightSrcExitCode)' == '0' ">true</_MakeHighlightSrcResult>
      <_MakeHighlightSrcResult Condition=" '$(_MakeHighlightSrcExitCode)' == '-1' ">true</_MakeHighlightSrcResult>
    </PropertyGroup>

    <!-- fallback: checkout source without `make` command -->
    <PropertyGroup Condition=" '$(_MakeHighlightSrcResult)' != 'true' ">
      <_CheckoutCommandLine><![CDATA[
        git clone '$(Highlight_SourceRepoUrl)' -b v$(Highlight_SourceVersionMajorMinor) --depth 1 '$(Highlight_SourceRootDirectory)' ||
        git clone '$(Highlight_SourceRepoUrl)' -b  $(Highlight_SourceVersionMajorMinor) --depth 1 '$(Highlight_SourceRootDirectory)'
      ]]></_CheckoutCommandLine>
      <!-- collapse CR and LF, spaces and trim -->
      <_CheckoutCommandLine>$([System.Text.RegularExpressions.Regex]::Replace('$(_CheckoutCommandLine)', '[\r\n]', ''))</_CheckoutCommandLine>
      <_CheckoutCommandLine>$([System.Text.RegularExpressions.Regex]::Replace('$(_CheckoutCommandLine)', '\s{2,}', ' '))</_CheckoutCommandLine>
      <_CheckoutCommandLine>$(_CheckoutCommandLine.Trim())</_CheckoutCommandLine>

      <_FallbackCheckoutCommandLine>$(_CheckoutCommandLine)</_FallbackCheckoutCommandLine>
      <_FallbackCheckoutCommandLine
        Condition="$([MSBuild]::IsOSPlatform('Windows'))"
      >"$(ProgramFiles)\Git\bin\sh.exe" --login -i -c "$(_CheckoutCommandLine)"</_FallbackCheckoutCommandLine>
    </PropertyGroup>

    <Exec
      Command="$(_FallbackCheckoutCommandLine)"
      Condition=" '$(_MakeHighlightSrcResult)' != 'true' "
    />
  </Target>

  <Target
    Name="Highlight_PrepareHighlightBuildConfigurationsFile"
    Outputs="$(_HighlightBuildConfigurationsFilePath)"
    Condition=" '$(TargetFramework)' != '' "
  >
    <PropertyGroup>
      <_HighlightBuildConfigurationsFilePath>$(BaseIntermediateOutputPath)HighlightConfigurations.g.cs</_HighlightBuildConfigurationsFilePath>
      <_HighlightConfigurationsContent><![CDATA[
// This file was automatically generated by $(MSBuildProjectFile).
// Do not edit this file by hand.
namespace $(Highlight_BindingsNamespace)%3B
internal static class HighlightConfigurations {
  public const string DllImportName = "$(Highlight_BindingsDllImportName)"%3B
  public const string DataDirRelativePath = "$(Highlight_DataDeploymentBasePath.Replace('\', '/'))"%3B
}
      ]]></_HighlightConfigurationsContent>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(_HighlightBuildConfigurationsFilePath)"
      Lines="$(_HighlightConfigurationsContent)"
      Overwrite="true"
    />

    <!-- include generated files into the compile target -->
    <ItemGroup>
      <Compile Include="$(_HighlightBuildConfigurationsFilePath)" Visible="false" AutoGen="true" />
    </ItemGroup>
  </Target>
</Project>

diff --git src/cli/cmdlineoptions.cpp src/cli/cmdlineoptions.cpp
index c8eea09..988125d 100644
--- src/cli/cmdlineoptions.cpp
+++ src/cli/cmdlineoptions.cpp
@@ -32,6 +32,10 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "arg_parser.h"
 
+using std::cerr;
+using std::endl;
+using std::string;
+using std::vector;
 
 enum Optcode {
         S_OPT_ENCLOSE_PRE = 256, S_OPT_FORCE_OUTPUT,
diff --git src/cli/cmdlineoptions.h src/cli/cmdlineoptions.h
index c12eb81..39b2573 100644
--- src/cli/cmdlineoptions.h
+++ src/cli/cmdlineoptions.h
@@ -587,7 +587,7 @@ private:
     std::vector <std::string> lsOptions;
 
     /** list of file types which should be ignored */
-    set <std::string> ignoredFileTypes;
+    std::set <std::string> ignoredFileTypes;
 
     /** \return file suffix */
     std::string getFileSuffix ( const std::string & fileName ) const;
diff --git src/cli/main.cpp src/cli/main.cpp
index 2213b83..fbe2b1c 100644
--- src/cli/main.cpp
+++ src/cli/main.cpp
@@ -39,6 +39,21 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "syntaxreader.h"
 #include "lspprofile.h"
 
+using std::cerr;
+using std::cin;
+using std::endl;
+using std::flush;
+using std::ifstream;
+using std::istringstream;
+using std::ios;
+using std::map;
+using std::ostream_iterator;
+using std::setiosflags;
+using std::setw;
+using std::string;
+using std::unique_ptr;
+using std::vector;
+
 void HLCmdLineApp::printVersionInfo(bool quietMode)
 {
     if (quietMode) {
diff --git src/cli/main.h src/cli/main.h
index 76cc306..058ccc2 100644
--- src/cli/main.h
+++ src/cli/main.h
@@ -68,8 +68,8 @@ private:
 
     DataDir dataDir;
 
-    bool serviceModeCheck(CmdLineOptions &options, highlight::CodeGenerator * generator, string &suffix, unsigned int &curFileIndex);
-    string service_mode_tag;
+    bool serviceModeCheck(CmdLineOptions &options, highlight::CodeGenerator * generator, std::string &suffix, unsigned int &curFileIndex);
+    std::string service_mode_tag;
 
 
     /** print version info*/
@@ -82,14 +82,14 @@ private:
     void printBadInstallationInfo();
 
     /** print input and output errors */
-    void printIOErrorReport ( unsigned int numberErrorFiles, vector<string> & fileList,
-                              const string &action, const string &streamName );
+    void printIOErrorReport ( unsigned int numberErrorFiles, std::vector<std::string> & fileList,
+                              const std::string &action, const std::string &streamName );
 
     /** list installed  files
         \return true if files were found
     */
-    int printInstalledFiles(const string& where, const string& wildcard, const string& kind,
-                            const string&option, const string& categoryFilterList="");
+    int printInstalledFiles(const std::string& where, const std::string& wildcard, const std::string& kind,
+                            const std::string&option, const std::string& categoryFilterList="");
 
     /** print debug information
         \param lang language definition
@@ -98,22 +98,22 @@ private:
 
     */
     void printDebugInfo ( const highlight::SyntaxReader *lang,
-                          const string &langDefPath, int level );
+                          const std::string &langDefPath, int level );
 
     void printPersistentStates ( const highlight::SyntaxReader *lang);
 
     int getNumDigits ( int i );
 
     void printProgressBar ( int total, int count );
-    void printCurrentAction ( const string&outfilePath,
+    void printCurrentAction ( const std::string&outfilePath,
                               int total, int count, int countWidth );
 
-    bool readInputFilePaths ( vector<string> &fileList, string wildcard,
+    bool readInputFilePaths ( std::vector<std::string> &fileList, std::string wildcard,
                               bool recursiveSearch );
 
     void printInstalledFiles();
 
-    vector <string> collectPluginPaths(const vector<string>& plugins);
+    std::vector <std::string> collectPluginPaths(const std::vector<std::string>& plugins);
 };
 
 #endif
diff --git src/core/ansigenerator.cpp src/core/ansigenerator.cpp
index 8e1de99..6a50e44 100644
--- src/core/ansigenerator.cpp
+++ src/core/ansigenerator.cpp
@@ -29,6 +29,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "ansigenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/bbcodegenerator.cpp src/core/bbcodegenerator.cpp
index 18166c2..3db9fbb 100644
--- src/core/bbcodegenerator.cpp
+++ src/core/bbcodegenerator.cpp
@@ -29,6 +29,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "bbcodegenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/codegenerator.cpp src/core/codegenerator.cpp
index c48ae21..3c0c2f2 100644
--- src/core/codegenerator.cpp
+++ src/core/codegenerator.cpp
@@ -52,6 +52,23 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "xterm256generator.h"
 #endif
 
+using std::cin;
+using std::cout;
+using std::ifstream;
+using std::ios;
+using std::istringstream;
+using std::iterator;
+using std::flush;
+using std::make_pair;
+using std::map;
+using std::ofstream;
+using std::ostream;
+using std::ostringstream;
+using std::right;
+using std::setw;
+using std::string;
+using std::vector;
+
 namespace highlight
 {
 const unsigned int CodeGenerator::NUMBER_BUILTIN_STATES = highlight::KEYWORD;
diff --git src/core/datadir.cpp src/core/datadir.cpp
index 94aa365..8336e6c 100644
--- src/core/datadir.cpp
+++ src/core/datadir.cpp
@@ -32,6 +32,12 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "datadir.h"
 
+using std::cerr;
+using std::cin;
+using std::cout;
+using std::ifstream;
+using std::ios;
+using std::string;
 
 string DataDir::LSB_DATA_DIR="/usr/share/highlight/";
 string DataDir::LSB_CFG_DIR="/etc/highlight/";
diff --git src/core/elementstyle.cpp src/core/elementstyle.cpp
index 85919db..ee44a9a 100644
--- src/core/elementstyle.cpp
+++ src/core/elementstyle.cpp
@@ -26,6 +26,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <sstream>
 #include "elementstyle.h"
 
+using std::istringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/htmlgenerator.cpp src/core/htmlgenerator.cpp
index 92c092b..8b0905e 100644
--- src/core/htmlgenerator.cpp
+++ src/core/htmlgenerator.cpp
@@ -32,6 +32,13 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "htmlgenerator.h"
 #include "version.h"
 
+using std::ofstream;
+using std::ostringstream;
+using std::right;
+using std::setw;
+using std::string;
+using std::vector;
+
 namespace highlight
 {
 
diff --git src/core/latexgenerator.cpp src/core/latexgenerator.cpp
index 6fa0fd3..4d73dd2 100644
--- src/core/latexgenerator.cpp
+++ src/core/latexgenerator.cpp
@@ -27,6 +27,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "latexgenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/lspclient.cpp src/core/lspclient.cpp
index 6cf6f6e..b08b107 100644
--- src/core/lspclient.cpp
+++ src/core/lspclient.cpp
@@ -40,6 +40,10 @@
 #include <chrono>
 #include <thread>
 
+using std::make_tuple;
+using std::string;
+using std::vector;
+
 namespace highlight
 {
 
diff --git src/core/odtgenerator.cpp src/core/odtgenerator.cpp
index 93dd456..a5fb3f1 100644
--- src/core/odtgenerator.cpp
+++ src/core/odtgenerator.cpp
@@ -27,6 +27,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <sstream>
 #include "odtgenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/pangogenerator.cpp src/core/pangogenerator.cpp
index 53cc9ab..e684a2c 100644
--- src/core/pangogenerator.cpp
+++ src/core/pangogenerator.cpp
@@ -29,6 +29,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "pangogenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/preformatter.cpp src/core/preformatter.cpp
index f03aac4..30c3df4 100644
--- src/core/preformatter.cpp
+++ src/core/preformatter.cpp
@@ -30,6 +30,8 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <iostream>
 #include "stringtools.h"
 
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/rtfgenerator.cpp src/core/rtfgenerator.cpp
index 05dfb39..6f79825 100644
--- src/core/rtfgenerator.cpp
+++ src/core/rtfgenerator.cpp
@@ -32,6 +32,13 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "version.h"
 #include "rtfgenerator.h"
 
+using std::endl;
+using std::ostringstream;
+using std::string;
+using std::stringstream;
+using std::to_string;
+using std::vector;
+
 namespace highlight
 {
 
diff --git src/core/stringtools.cpp src/core/stringtools.cpp
index a9c1d1f..44217b9 100644
--- src/core/stringtools.cpp
+++ src/core/stringtools.cpp
@@ -26,6 +26,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "stringtools.h"
 
+using std::string;
+using std::vector;
+
 namespace StringTools
 {
 
diff --git src/core/stylecolour.cpp src/core/stylecolour.cpp
index 4ba30bc..37b805e 100644
--- src/core/stylecolour.cpp
+++ src/core/stylecolour.cpp
@@ -33,6 +33,8 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <sstream>
 #include <cmath>
 
+using std::istringstream;
+using std::ostringstream;
 using std::string;
 
 namespace highlight
diff --git src/core/svggenerator.cpp src/core/svggenerator.cpp
index 46f1a0b..90204bf 100644
--- src/core/svggenerator.cpp
+++ src/core/svggenerator.cpp
@@ -31,6 +31,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "version.h"
 #include "svggenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/syntaxreader.cpp src/core/syntaxreader.cpp
index 242e9d5..2b6b510 100644
--- src/core/syntaxreader.cpp
+++ src/core/syntaxreader.cpp
@@ -30,6 +30,12 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "keystore.h"
 #include "enums.h"
 
+using std::iterator;
+using std::ostringstream;
+using std::set;
+using std::string;
+using std::vector;
+
 namespace highlight
 {
 
diff --git src/core/texgenerator.cpp src/core/texgenerator.cpp
index 6d64ea1..468ac58 100644
--- src/core/texgenerator.cpp
+++ src/core/texgenerator.cpp
@@ -31,6 +31,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "version.h"
 #include "texgenerator.h"
 
+using std::ostringstream;
+using std::string;
+
 namespace highlight
 {
 
diff --git src/core/themereader.cpp src/core/themereader.cpp
index 7b189ea..fcaa79c 100644
--- src/core/themereader.cpp
+++ src/core/themereader.cpp
@@ -31,6 +31,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <iostream>
 #include <cmath>
 
+using std::string;
+using std::vector;
+
 namespace highlight
 {
 
diff --git src/core/xhtmlgenerator.cpp src/core/xhtmlgenerator.cpp
index 9cd83ce..a38d0dd 100644
--- src/core/xhtmlgenerator.cpp
+++ src/core/xhtmlgenerator.cpp
@@ -26,6 +26,9 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "xhtmlgenerator.h"
 
+using std::string;
+using std::ostringstream;
+
 namespace highlight
 {
 
diff --git src/core/xterm256generator.cpp src/core/xterm256generator.cpp
index 5f86527..dccb765 100644
--- src/core/xterm256generator.cpp
+++ src/core/xterm256generator.cpp
@@ -34,6 +34,8 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include "charcodes.h"
 #include "version.h"
 
+using std::ostringstream;
+using std::string;
 
 namespace highlight
 {
diff --git src/gui-qt/mainwindow.cpp src/gui-qt/mainwindow.cpp
index 07bb211..921e4a5 100644
--- src/gui-qt/mainwindow.cpp
+++ src/gui-qt/mainwindow.cpp
@@ -42,6 +42,12 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #endif
 //#include <QDebug>
 
+using std::ifstream;
+using std::iterator;
+using std::string;
+using std::unique_ptr;
+using std::vector;
+
 MainWindow::MainWindow(QWidget *parent)
 : QMainWindow(parent), ui(new Ui::MainWindowClass),
 lsDelay(0), oldThemeIndex(0), getDataFromCP(false), runFirstTime(true)
diff --git src/gui-qt/mainwindow.h src/gui-qt/mainwindow.h
index 22f042f..4943747 100644
--- src/gui-qt/mainwindow.h
+++ src/gui-qt/mainwindow.h
@@ -68,8 +68,8 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <vector>
 #include "enums.h"
 
-typedef multimap<string, string> MMap;
-typedef map<string, string> SMap;
+typedef std::multimap<std::string, std::string> MMap;
+typedef std::map<std::string, std::string> SMap;
 
 namespace Ui
 {
@@ -121,7 +121,7 @@ private:
     QString getUserScriptPath(QString type);
 
     QString getDistThemePath();
-    QString getDistLangPath(const string & suffix);
+    QString getDistLangPath(const std::string & suffix);
     QString getDistPluginPath();
     QString getDistFileConfigPath(QString name);
     QString getDistFileFilterPath();
@@ -141,11 +141,11 @@ private:
 
     void highlight2Clipboard(bool getDataFromCP);
 
-    string analyzeFile(const string& file);
-    string getFileType(const string& suffix, const string &inputFile);
-    string getFileSuffix(const string& fileName);
-    string getFileBaseName(const string& fileName);
-    void readLuaList(const string& paramName, const string& langName, Diluculum::LuaValue &luaVal, MMap* extMap);
+    std::string analyzeFile(const std::string& file);
+    std::string getFileType(const std::string& suffix, const std::string &inputFile);
+    std::string getFileSuffix(const std::string& fileName);
+    std::string getFileBaseName(const std::string& fileName);
+    void readLuaList(const std::string& paramName, const std::string& langName, Diluculum::LuaValue &luaVal, MMap* extMap);
     void fillThemeCombo(int);
     void showHelpFile(const QString& file);
 
diff --git src/include/ansigenerator.h src/include/ansigenerator.h
index 87fdccc..efcdc8a 100644
--- src/include/ansigenerator.h
+++ src/include/ansigenerator.h
@@ -55,10 +55,10 @@ public:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -66,23 +66,23 @@ public:
 private:
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
 
     /** \return ANSI formatting sequences */
-    string getOpenTag ( const string& font,
-                        const string& fgCol, const string& bgCol="" );
+    std::string getOpenTag ( const std::string& font,
+                             const std::string& fgCol, const std::string& bgCol="" );
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 };
 
 }
diff --git src/include/bbcodegenerator.h src/include/bbcodegenerator.h
index 9a0ebf8..2159397 100644
--- src/include/bbcodegenerator.h
+++ src/include/bbcodegenerator.h
@@ -55,10 +55,10 @@ public:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -66,24 +66,24 @@ public:
 private:
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /** @return BBcode open tags */
-    string getOpenTag (const ElementStyle & elem );
+    std::string getOpenTag (const ElementStyle & elem );
 
     /** @return BBcode close tags */
-    string  getCloseTag ( const ElementStyle &elem );
+    std::string  getCloseTag ( const ElementStyle &elem );
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 };
 
 }
diff --git src/include/codegenerator.h src/include/codegenerator.h
index 9967ae3..6b76c8d 100644
--- src/include/codegenerator.h
+++ src/include/codegenerator.h
@@ -126,10 +126,10 @@ public:
      \param loadSemanticStyles set true if semantic styles should be read
      \return true if successful
     */
-    bool initTheme ( const string& themePath, bool loadSemanticStyles=false );
+    bool initTheme ( const std::string& themePath, bool loadSemanticStyles=false );
 
-    LSResult initLanguageServer ( const string& executable, const vector<string> &options, const string& workspace,
-                                  const string& syntax, int delay, int logLevel, bool legacy = false );
+    LSResult initLanguageServer ( const std::string& executable, const std::vector<std::string> &options, const std::string& workspace,
+                                  const std::string& syntax, int delay, int logLevel, bool legacy = false );
 
     void exitLanguageServer ();
 
@@ -137,25 +137,25 @@ public:
     /**
      \return description of the theme init error
     */
-    string getThemeInitError();
+    std::string getThemeInitError();
 
     /**
      \return description of the plug-in script error
     */
-    string getPluginScriptError();
+    std::string getPluginScriptError();
 
     /** initialize source code indentation and reformatting scheme;
         needs to be called before using a generate* method
         \param indentScheme Name of indentation scheme
         \return true if successful
      */
-    bool initIndentationScheme ( const string& indentScheme );
+    bool initIndentationScheme ( const std::string& indentScheme );
 
     /** \param langDefPath Absolute path to language definition, may be used multiple times for a generator instance
      *  \param embedded set True if method is called to load an embedded language
         \return   LOAD_OK, LOAD_FAILED, LOAD_FAILED_REGEX, LOAD_FAILED_LUA
     */
-    LoadResult loadLanguage ( const string& langDefPath, bool embedded=false );
+    LoadResult loadLanguage ( const std::string& langDefPath, bool embedded=false );
 
     /**
      Generate output file from input file
@@ -163,41 +163,41 @@ public:
      \param outFileName Path of output file (if empty use stdout)
      \return ParseError
     */
-    ParseError generateFile ( const string &inFileName, const string &outFileName );
+    ParseError generateFile ( const std::string &inFileName, const std::string &outFileName );
 
     /**
      Generate output string from input string
      \param input input code string
      \return formatted output code
     */
-    string generateString ( const string &input );
+    std::string generateString ( const std::string &input );
 
     /**
      Generate output string from input file
      \param inFileName file path
      \return formatted output code
     */
-    string generateStringFromFile ( const string &inFileName );
+    std::string generateStringFromFile ( const std::string &inFileName );
 
     /** Print style definitions to external file or stdout
       \param outFile Path of external style definition; print to stdout if empty
        \return true if successful
       */
-    bool printExternalStyle ( const string &outFile );
+    bool printExternalStyle ( const std::string &outFile );
 
     /** Print persistent state snippets to external file
       \param outFile Path of plugin file to generate
        \return true if successful
       */
-    bool printPersistentState ( const string &outFile );
+    bool printPersistentState ( const std::string &outFile );
 
     /** Print index file with all input file names
        \param fileList List of output file names
        \param outPath Output path
         \return true if successful
      */
-    virtual bool printIndexFile ( const vector<string> & fileList,
-                                  const string &outPath );
+    virtual bool printIndexFile ( const std::vector<std::string> & fileList,
+                                  const std::string &outPath );
 
     /** define the preformatting parameters. Preformatting takes place before
         the optional astyle reformatting and indenting is performed (defined by initIndentationScheme)
@@ -294,23 +294,23 @@ public:
     bool getIsolateTags ();
 
     /** \return style path */
-    const string& getStyleName();
+    const std::string& getStyleName();
 
     /** use this font as base font
       * \param fontName the font name, e.g. "Courier New"
      */
-    void setBaseFont ( const string& fontName);
+    void setBaseFont ( const std::string& fontName);
 
     /** \return base font */
-    const string getBaseFont() const ;
+    const std::string getBaseFont() const ;
 
     /** use this size as base font size
       * \param fontSize the font size, e.g. "12"
      */
-    void setBaseFontSize ( const string& fontSize );
+    void setBaseFontSize ( const std::string& fontSize );
 
     /** \return base font size*/
-    const string getBaseFontSize();
+    const std::string getBaseFontSize();
 
     /** tell parser the include style definition in output
         \param flag true if style should be included
@@ -326,29 +326,29 @@ public:
     /** Set style input path
         \param path path to style input file
       */
-    void setStyleInputPath ( const string& path );
+    void setStyleInputPath ( const std::string& path );
 
     /** Set style output path
       \param path path to style output file
     */
-    void setStyleOutputPath ( const string& path );
+    void setStyleOutputPath ( const std::string& path );
 
     /** Set encoding (output encoding must match input file)
       \param encodingName encoding name
     */
-    void setEncoding ( const string& encodingName );
+    void setEncoding ( const std::string& encodingName );
 
     /** \return style input file path */
-    const string&  getStyleInputPath();
+    const std::string&  getStyleInputPath();
 
     /** \return style output file path */
-    const string&  getStyleOutputPath();
+    const std::string&  getStyleOutputPath();
 
     /** \param title Document title */
-    void setTitle ( const string & title );
+    void setTitle ( const std::string & title );
 
     /** \return Document title */
-    string getTitle();
+    std::string getTitle();
 
     /** \param begin number of the first input line to be processed */
     void setStartingInputLine ( unsigned int begin );
@@ -368,14 +368,14 @@ public:
 
     /** \param param path of plugin input file
     */
-    void setPluginParameter ( const string& param );
+    void setPluginParameter ( const std::string& param );
 
     void resetSyntaxReaders();
 
     /** Load the Lua functions og the plug-in script
     	\param script path of the plug-in script
     */
-    bool initPluginScript(const string& script);
+    bool initPluginScript(const std::string& script);
 
     bool syntaxRequiresTwoPassRun();
 
@@ -385,30 +385,30 @@ public:
     void setStyleCaching ( bool flag );
 
     /** \return Syntaxreader Regex error message */
-    string getSyntaxRegexError();
+    std::string getSyntaxRegexError();
 
     /** \return Syntaxreader Lua error message */
-    string getSyntaxLuaError();
+    std::string getSyntaxLuaError();
 
     /** \return Syntaxreader description */
-    string getSyntaxDescription();
+    std::string getSyntaxDescription();
 
     /** \return Encoding hint */
-    string getSyntaxEncodingHint();
+    std::string getSyntaxEncodingHint();
 
     /** \return Theme description */
-    string getThemeDescription();
+    std::string getThemeDescription();
 
     /** \return Syntaxreader category description */
-    string getSyntaxCatDescription();
+    std::string getSyntaxCatDescription();
 
     /** \return Encoding contrast of Canvas and Default colours */
     float getThemeContrast();
 
     /** \return Theme category description */
-    string getThemeCatDescription();
+    std::string getThemeCatDescription();
 
-    vector<string> getPosTestErrors() { return failedPosTests; }
+    std::vector<std::string> getPosTestErrors() { return failedPosTests; }
 
     /** \return Pointer Syntaxreader, intended for debug output  */
     SyntaxReader* getSyntaxReader()
@@ -417,29 +417,29 @@ public:
     }
 
     /** \return Content of user defined input style */
-    string readUserStyleDef();
+    std::string readUserStyleDef();
 
     /** \return Style definition of the chosen output format */
-    virtual string getStyleDefinition()
+    virtual std::string getStyleDefinition()
     {
         return "";
     }
 
-    virtual string getHoverTagOpen(const string & hoverText)
+    virtual std::string getHoverTagOpen(const std::string & hoverText)
     {
         return "";
     }
 
-    virtual string getHoverTagClose()
+    virtual std::string getHoverTagClose()
     {
         return "";
     }
 
-    bool lsOpenDocument(const string& fileName, const string & suffix);
+    bool lsOpenDocument(const std::string& fileName, const std::string & suffix);
 
-    bool lsCloseDocument(const string& fileName, const string & suffix);
+    bool lsCloseDocument(const std::string& fileName, const std::string & suffix);
 
-    bool lsAddSemanticInfo(const string& fileName, const string & suffix);
+    bool lsAddSemanticInfo(const std::string& fileName, const std::string & suffix);
 
     void lsAddHoverInfo(bool hover);
 
@@ -471,11 +471,11 @@ public:
 
     /** set HTML output anchor prefix
      */
-    virtual void setHTMLAnchorPrefix ( const string& )  {};
+    virtual void setHTMLAnchorPrefix ( const std::string& )  {};
 
     /** set HTML output class name
      */
-    virtual void setHTMLClassName ( const string& )  {};
+    virtual void setHTMLClassName ( const std::string& )  {};
 
     /** set LaTeX replace quotes flag
      */
@@ -493,7 +493,7 @@ public:
 
     /** set RTF page size
      */
-    virtual void setRTFPageSize ( const string& )  {};
+    virtual void setRTFPageSize ( const std::string& )  {};
 
     /** set RTF output character styles flag
      */
@@ -505,7 +505,7 @@ public:
 
     /** set SVG page size
      */
-    virtual void setSVGSize ( const string&, const string& )  {};
+    virtual void setSVGSize ( const std::string&, const std::string& )  {};
 
     /** set True Color flag
      */
@@ -519,21 +519,21 @@ protected:
 
     static const unsigned int NUMBER_BUILTIN_STATES;  ///< number of token states (without keyword group IDs)
 
-    static const string STY_NAME_STD;
-    static const string STY_NAME_STR;
-    static const string STY_NAME_NUM;
-    static const string STY_NAME_SLC;
-    static const string STY_NAME_COM;
-    static const string STY_NAME_ESC;
-    static const string STY_NAME_DIR;
-    static const string STY_NAME_DST;
-    static const string STY_NAME_LIN;
-    static const string STY_NAME_SYM;
-    static const string STY_NAME_IPL;
-
-    static const string STY_NAME_HVR;
-    static const string STY_NAME_ERR;
-    static const string STY_NAME_ERM;
+    static const std::string STY_NAME_STD;
+    static const std::string STY_NAME_STR;
+    static const std::string STY_NAME_NUM;
+    static const std::string STY_NAME_SLC;
+    static const std::string STY_NAME_COM;
+    static const std::string STY_NAME_ESC;
+    static const std::string STY_NAME_DIR;
+    static const std::string STY_NAME_DST;
+    static const std::string STY_NAME_LIN;
+    static const std::string STY_NAME_SYM;
+    static const std::string STY_NAME_IPL;
+
+    static const std::string STY_NAME_HVR;
+    static const std::string STY_NAME_ERR;
+    static const std::string STY_NAME_ERM;
 
     /** \param type Output type */
     CodeGenerator ( highlight::OutputType type );
@@ -541,13 +541,13 @@ protected:
 
     /** \param c Character to be masked
         \return Escape sequence of output format */
-    virtual string maskCharacter ( unsigned char c ) = 0;
+    virtual std::string maskCharacter ( unsigned char c ) = 0;
 
     /** \param ss destination stream
         \param s string */
-    void maskString ( ostream& ss, const string &s ) ;
+    void maskString ( std::ostream& ss, const std::string &s ) ;
 
-    void printSyntaxError ( ostream& ss ) ;
+    void printSyntaxError ( std::ostream& ss ) ;
 
     /** Get current line number
       \return line number  */
@@ -555,8 +555,8 @@ protected:
 
     bool AtEnd(char c = -1) const;
 
-    vector <string> openTags,   ///< list of format delimiters (open new format descriptions)
-           closeTags;   ///< list of format delimiters (close format descriptions)
+    std::vector <std::string> openTags,   ///< list of format delimiters (open new format descriptions)
+                              closeTags;   ///< list of format delimiters (close format descriptions)
 
     /** Description of document colour style*/
     ThemeReader docStyle;
@@ -565,37 +565,37 @@ protected:
     SyntaxReader* currentSyntax;
 
     /** Tag for inserting line feeds*/
-    string newLineTag;
+    std::string newLineTag;
 
     /** String that represents a white space in output */
-    string spacer, initialSpacer;
+    std::string spacer, initialSpacer;
 
     /** file input*/
-    istream *in;
+    std::istream *in;
 
     /** file output*/
-    ostream *out;
+    std::ostream *out;
 
-    string maskWsBegin,  ///< open whitespace mask
-           maskWsEnd;    ///< close whitespace mask
+    std::string maskWsBegin,  ///< open whitespace mask
+                maskWsEnd;    ///< close whitespace mask
 
-    string styleCommentOpen,  ///< open comment delimiter
-           styleCommentClose; ///< close comment delimiter
+    std::string styleCommentOpen,  ///< open comment delimiter
+                styleCommentClose; ///< close comment delimiter
 
-    string embedBlockOpen,  ///< open block delimiter to highlight embedded code
-           embedBlockClose; ///< close block delimiter
+    std::string embedBlockOpen,  ///< open block delimiter to highlight embedded code
+                embedBlockClose; ///< close block delimiter
 
     /** Encoding name */
-    string encoding;
+    std::string encoding;
 
     /** document title */
-    string docTitle;
+    std::string docTitle;
 
-    string inFile,   ///< input file name
-           outFile;  ///< output file name
+    std::string inFile,   ///< input file name
+                outFile;  ///< output file name
 
     /// LSP syntax error description
-    string lsSyntaxErrorDesc;
+    std::string lsSyntaxErrorDesc;
 
     /** Test if maskWsBegin and maskWsEnd should be applied */
     bool maskWs;
@@ -627,13 +627,13 @@ protected:
     bool disableStyleCache;
 
     /** The base font to use */
-    string baseFont ;
+    std::string baseFont ;
 
     /** The base font size to use */
-    string baseFontSize ;
+    std::string baseFontSize ;
 
     /** Current line of input file*/
-    string line;
+    std::string line;
 
     /** Current line number */
     unsigned int lineNumber;
@@ -651,7 +651,7 @@ protected:
     void processRootState();
 
     /** \return line break sequence */
-    virtual string getNewLine();
+    virtual std::string getNewLine();
 
     /**
        \param s current state
@@ -676,7 +676,7 @@ protected:
     }
 
     /** Invoke plugin decorate user function */
-    Diluculum::LuaValueList callDecorateFct(const string& token);
+    Diluculum::LuaValueList callDecorateFct(const std::string& token);
 
     /** Invoke plugin decorate line user function
      @param isLineStart set true if line start function should be called,
@@ -684,7 +684,7 @@ protected:
     Diluculum::LuaValueList callDecorateLineFct(bool isLineStart);
 
     /** contains white space, which will be printed after a closing tag */
-    string wsBuffer;
+    std::string wsBuffer;
 
     /** Flag to test if style definition should be included in output document */
     bool includeStyleDef;
@@ -703,7 +703,7 @@ protected:
 
 private:
 
-    void printTrace(const string &s);
+    void printTrace(const std::string &s);
 
     CodeGenerator ( const CodeGenerator& ) {}
 
@@ -719,11 +719,11 @@ private:
 
     /** returns output specific document footer
         @return footer */
-    virtual string getFooter() = 0;
+    virtual std::string getFooter() = 0;
 
     /** returns output specific document header
       * @return header */
-    virtual string getHeader() = 0;
+    virtual std::string getHeader() = 0;
 
     /** Prints document header*/
     void printHeader();
@@ -740,11 +740,11 @@ private:
 
     /** \param styleID keyword style id
     	\return  open tag  */
-    virtual string getKeywordOpenTag ( unsigned int styleID) = 0;
+    virtual std::string getKeywordOpenTag ( unsigned int styleID) = 0;
 
     /** \param styleID keyword style id
     	\return  close tag  */
-    virtual string getKeywordCloseTag ( unsigned int styleID) = 0;
+    virtual std::string getKeywordCloseTag ( unsigned int styleID) = 0;
 
     /** open a new tag, set current state to s*/
     void openTag ( State s );
@@ -759,16 +759,16 @@ private:
     void openKWTag ( unsigned int styleID );
 
     /// path to style definition file
-    string themePath;
+    std::string themePath;
 
     /// path to host language definition
-    string hostLangDefPath;
+    std::string hostLangDefPath;
 
     /// path to embedded language definition
-    string embedLangDefPath;
+    std::string embedLangDefPath;
 
     /// path to plugin input file
-    string pluginParameter;
+    std::string pluginParameter;
 
     /// contains current position in line
     unsigned int lineIndex;
@@ -845,14 +845,14 @@ private:
     StringTools::KeywordCase keywordCase;
 
     /** contains the current token*/
-    string token;
+    std::string token;
 
-    string styleInputPath,   ///< style input file path
-           styleOutputPath;  ///< style output file path
+    std::string styleInputPath,   ///< style input file path
+                styleOutputPath;  ///< style output file path
 
-    string userScriptError;  ///< Plug-In script error message
+    std::string userScriptError;  ///< Plug-In script error message
 
-    string lsDocumentPath;   ///< Language Server input file name
+    std::string lsDocumentPath;   ///< Language Server input file name
 
     /** end-of-line delimiter*/
     char eolDelimiter;
@@ -861,7 +861,7 @@ private:
     void reset();
 
     /** read new line from in stream */
-    bool readNewLine ( string &newLine );
+    bool readNewLine ( std::string &newLine );
 
     /** return next character from in stream */
     unsigned char getInputChar();
@@ -893,7 +893,7 @@ private:
     void runSyntaxTestcases(unsigned int column);
 
     /* returns name of testcase state */
-    string getTestcaseName(State s, unsigned int kwClass);
+    std::string getTestcaseName(State s, unsigned int kwClass);
 
     /** print escaped token and clears it
        \param flushWhiteSpace set true if white space should be flushed
@@ -905,7 +905,7 @@ private:
     void updateKeywordClasses();
 
     /** association of matched regexes and the corresponding keyword class ids*/
-    map <int, RegexToken> regexGroups;
+    std::map <int, RegexToken> regexGroups;
 
     /** history of states per line position in the current line of input code (max 200 entries) */
 
@@ -918,17 +918,17 @@ private:
             if (s!=KEYWORD) kwClass=0;
         }
     };
-    vector<PositionState> stateTraceCurrent, stateTraceTest;
+    std::vector<PositionState> stateTraceCurrent, stateTraceTest;
 
-    vector<string> failedPosTests;
+    std::vector<std::string> failedPosTests;
 
     /** association of syntax definitions and their paths*/
-    map <string, SyntaxReader*> syntaxReaders;
+    std::map <std::string, SyntaxReader*> syntaxReaders;
 
     /** test for regular expressions
         \param line current input line
         \param skipState state which should be ignored*/
-    void matchRegex ( const string &line, State skipState=_UNKNOWN );
+    void matchRegex ( const std::string &line, State skipState=_UNKNOWN );
 
     /** \return true if input is no binary stream */
     bool validateInputStream();
@@ -936,7 +936,7 @@ private:
     /** load syntax description of embedded snippet's language
      \param embedLangDefPath path to language definition
       \return true if successful */
-    bool loadEmbeddedLang(const string&embedLangDefPath);
+    bool loadEmbeddedLang(const std::string&embedLangDefPath);
 
     /** call user script OnStateChange function if defined to confirm state change
      \param newState new state
@@ -954,13 +954,13 @@ private:
         pluginChunks.push_back(new Diluculum::LuaFunction(chunk));
     }
 
-    void applyPluginChunk(const string& fctName, string *result, bool *keepDefault);
+    void applyPluginChunk(const std::string& fctName, std::string *result, bool *keepDefault);
 
     void initASStream();
 
     void setOverrideParams();
 
-    static vector<Diluculum::LuaFunction*> pluginChunks;
+    static std::vector<Diluculum::LuaFunction*> pluginChunks;
 
     highlight::LSPClient LSPClient;
 };
diff --git src/include/datadir.h src/include/datadir.h
index 775ddd6..e3578b1 100644
--- src/include/datadir.h
+++ src/include/datadir.h
@@ -150,9 +150,9 @@ public:
      */
     bool loadLSPConfig ( const std::string& name);
 
-    bool profileExists(const string &profile);
+    bool profileExists(const std::string &profile);
 
-    highlight::LSPProfile &getProfile(const string &profile);
+    highlight::LSPProfile &getProfile(const std::string &profile);
 };
 
 #endif
diff --git src/include/elementstyle.h src/include/elementstyle.h
index a1f7bff..c169571 100644
--- src/include/elementstyle.h
+++ src/include/elementstyle.h
@@ -30,8 +30,6 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "stylecolour.h"
 
-using namespace std;
-
 namespace highlight
 {
 
@@ -53,7 +51,7 @@ public:
 
     /** Constructor
          \param elementStyleString String with formatting information (eg "00 aa ff bold") */
-    ElementStyle ( const string & elementStyleString );
+    ElementStyle ( const std::string & elementStyleString );
 
     /** Constructor */
     ElementStyle();
@@ -90,7 +88,7 @@ public:
                 color can be HTML hex notation or a hex RGB tuple (ie "#2244ff" or "22 44 ff")
                 attr can be a combination of "italic, "bold" and "underline")
     */
-    void set ( const string & elementStyleString );
+    void set ( const std::string & elementStyleString );
 
     /** \return True if italic */
     bool isItalic() const;
@@ -118,7 +116,7 @@ public:
 
     std::string getCustomStyle() const;
 
-    void setCustomStyle(const string & style);
+    void setCustomStyle(const std::string & style);
 
     bool getCustomOverride() const;
 
diff --git src/include/htmlgenerator.h src/include/htmlgenerator.h
index 192fdbc..e1d1eaf 100644
--- src/include/htmlgenerator.h
+++ src/include/htmlgenerator.h
@@ -61,13 +61,13 @@ public:
     /** Print style definitions to external file
      \param outFile Path of external style definition
      */
-    bool printExternalStyle ( const string &outFile );
+    bool printExternalStyle ( const std::string &outFile );
 
     /** Print index file with all input file names
       \param fileList List of output file names
       \param outPath Output path
     */
-    bool printIndexFile ( const vector<string> & fileList, const string &outPath );
+    bool printIndexFile ( const std::vector<std::string> & fileList, const std::string &outPath );
 
     /**
       \param  b set true if anchors should be attached to line numbers
@@ -80,7 +80,7 @@ public:
     /**
       \param  prefix anchor prefix
     */
-    void setHTMLAnchorPrefix ( const string & prefix )
+    void setHTMLAnchorPrefix ( const std::string & prefix )
     {
         anchorPrefix = prefix;
     }
@@ -109,20 +109,20 @@ public:
     /**
       \param name CSS Class name
     */
-    void setHTMLClassName ( const string& name )
+    void setHTMLClassName ( const std::string& name )
     {
         cssClassName  = (StringTools::change_case ( name ) =="none") ? "" : name;
     }
 
 protected:
 
-    string brTag,       ///< break tag
-           hrTag,       ///< horizontal ruler tag
-           fileSuffix,   ///< filename extension
-           cssClassName; ///< css class name prefix
+    std::string brTag,       ///< break tag
+                hrTag,       ///< horizontal ruler tag
+                fileSuffix,   ///< filename extension
+                cssClassName; ///< css class name prefix
 
     /** caches style definition */
-    string styleDefinitionCache;
+    std::string styleDefinitionCache;
 
     /** line count should be replaced by ordered list*/
     bool orderedList;
@@ -134,17 +134,17 @@ protected:
     bool enclosePreTag;
 
     /** \return CSS definition */
-    string  getStyleDefinition();
+    std::string  getStyleDefinition();
 
     /** \return Content of user defined style file */
-    string readUserStyleDef();
+    std::string readUserStyleDef();
 
     /** \param title Dociment title
         \return Start of file header */
-    virtual string getHeaderStart ( const string &title );
+    virtual std::string getHeaderStart ( const std::string &title );
 
     /** \return Comment with program information */
-    string getGeneratorComment();
+    std::string getGeneratorComment();
 
 private:
 
@@ -157,13 +157,13 @@ private:
 
     /** Print document header
     */
-    string getHeader();
+    std::string getHeader();
 
     /** Print document body*/
     void printBody();
 
     /** Print document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
@@ -171,38 +171,38 @@ private:
     /**  \param styleName Style name
          \return Opening tag of the given style
     */
-    string getOpenTag ( const string& styleName );
+    std::string getOpenTag ( const std::string& styleName );
 
-    string getOpenTag ( const ElementStyle& elem );
+    std::string getOpenTag ( const ElementStyle& elem );
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /** test if anchors should be applied to line numbers*/
     bool attachAnchors;
 
     /**Optional anchor prefix */
-    string anchorPrefix;
+    std::string anchorPrefix;
 
     /**\return text formatting attributes in HTML format */
-    string  getAttributes ( const string & elemName, const ElementStyle & elem );
+    std::string  getAttributes ( const std::string & elemName, const ElementStyle & elem );
 
     /**  \param styleID Style ID
          \return Opening tag of the given style
     */
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /**  \param styleID Style ID
          \return Closing tag of the given style
     */
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 
     /** @return Newline string */
-    string getNewLine();
+    std::string getNewLine();
 
-    virtual string getHoverTagOpen(const string & hoverText);
+    virtual std::string getHoverTagOpen(const std::string & hoverText);
 
-    virtual string getHoverTagClose();
+    virtual std::string getHoverTagClose();
 };
 
 }
diff --git src/include/latexgenerator.h src/include/latexgenerator.h
index 79ad2cd..89364ef 100644
--- src/include/latexgenerator.h
+++ src/include/latexgenerator.h
@@ -94,10 +94,10 @@ private:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -105,15 +105,15 @@ private:
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
-    string styleDefinitionCache;
-    string longLineTag;
+    std::string styleDefinitionCache;
+    std::string longLineTag;
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /**\return text formatting attributes in LaTeX format */
-    string getAttributes ( const string & elemName,
-                           const ElementStyle & elem );
+    std::string getAttributes ( const std::string & elemName,
+                                const ElementStyle & elem );
 
     /** test if double quotes should be replaced by \dq{} */
     bool replaceQuotes;
@@ -126,12 +126,12 @@ private:
 
     bool beamerMode;
 
-    string getNewLine();
+    std::string getNewLine();
 
-    string getStyleDefinition();
+    std::string getStyleDefinition();
 
-    string getKeywordOpenTag ( unsigned int styleID );
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 };
 
 }
diff --git src/include/odtgenerator.h src/include/odtgenerator.h
index 12d927f..3c4b043 100644
--- src/include/odtgenerator.h
+++ src/include/odtgenerator.h
@@ -54,10 +54,10 @@ public:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -65,27 +65,27 @@ public:
 private:
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /** @return ODT open tags */
-    string getOpenTag ( const string& styleName );
+    std::string getOpenTag ( const std::string& styleName );
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 
-    string styleDefinitionCache;
+    std::string styleDefinitionCache;
 
-    string getStyleDefinition();
+    std::string getStyleDefinition();
 
-    string getAttributes ( const string &, const ElementStyle & );
+    std::string getAttributes ( const std::string &, const ElementStyle & );
 };
 
 }
diff --git src/include/pangogenerator.h src/include/pangogenerator.h
index 6f56ea1..f133114 100644
--- src/include/pangogenerator.h
+++ src/include/pangogenerator.h
@@ -55,10 +55,10 @@ public:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -66,24 +66,24 @@ public:
 private:
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /**\return text formatting attributes in Pango markup */
-    string getAttributes ( const ElementStyle & elem );
+    std::string getAttributes ( const ElementStyle & elem );
 
     /** gibt Pangotags zurück*/
-    string getOpenTag ( const ElementStyle & elem );
+    std::string getOpenTag ( const ElementStyle & elem );
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 };
 
 }
diff --git src/include/rtfgenerator.h src/include/rtfgenerator.h
index 3c715a0..400047d 100644
--- src/include/rtfgenerator.h
+++ src/include/rtfgenerator.h
@@ -62,7 +62,7 @@ struct PageSize {
 };
 
 /** mapping of page size names and dimensions */
-typedef  map<string, struct PageSize> PagesizeMap;
+typedef  std::map<std::string, struct PageSize> PagesizeMap;
 
 /**
    \brief This class generates RTF.
@@ -84,7 +84,7 @@ public:
 
     /**  Define RTF page size
          @param ps RTF page size (a3, a4, a5, b4, b5, b6, letter, legal) */
-    void setRTFPageSize ( const string & ps );
+    void setRTFPageSize ( const std::string & ps );
 
     /** @param cs flag to enable character styles*/
     void setRTFCharStyles ( bool cs );
@@ -96,10 +96,10 @@ private:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -111,7 +111,7 @@ private:
     PagesizeMap psMap;
 
     /** name of page size which is mapped to page dimensions*/
-    string pageSize;
+    std::string pageSize;
 
     /** flag to add character styles */
     bool addCharStyles;
@@ -127,33 +127,33 @@ private:
     size_t utf8SeqLen;
 
     /** @return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /**\return text formatting attributes in RTF format */
-    string  getAttributes ( const ElementStyle & col );
+    std::string  getAttributes ( const ElementStyle & col );
 
     /** @param styleNumber number of current style
         @param elem associated element style
         @return RTF formatting sequence (colour index + bold + italic)*/
-    string getOpenTag ( int styleNumber,const ElementStyle &elem );
+    std::string getOpenTag ( int styleNumber,const ElementStyle &elem );
 
     /** @param styleNumber number of current style
         @param elem associated element style
         @param styleName style name
         @return RTF character style definition */
-    string getCharStyle ( int styleNumber,const ElementStyle &elem, const string&styleName );
+    std::string getCharStyle ( int styleNumber,const ElementStyle &elem, const std::string&styleName );
 
     /** @param elem associated element style
         @return RTF formatting sequence to close element formatting */
-    string getCloseTag ( const ElementStyle &elem );
+    std::string getCloseTag ( const ElementStyle &elem );
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 };
 
 }
diff --git src/include/stringtools.h src/include/stringtools.h
index ec6700c..4a48855 100644
--- src/include/stringtools.h
+++ src/include/stringtools.h
@@ -32,8 +32,6 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <vector>
 #include <sstream>
 
-using namespace std;
-
 /// Contains methods for string manipulation
 
 namespace StringTools
@@ -52,22 +50,22 @@ enum KeywordCase {
     \param kcase case modification indicator
     \return modified string
 */
-string change_case ( const string & s,
+std::string change_case ( const std::string & s,
                      const KeywordCase kcase = CASE_LOWER ) throw();
 
 /** Trim string (remove whitespace)
    \param value String
    \return string trimmed on the right
 */
-string trimRight ( const string &value );
+std::string trimRight ( const std::string &value );
 
-string trim(const string& s);
+std::string trim(const std::string& s);
 
 /** Split string and return items separated by a delimiter
     \param s string containing tokens
     \param delim Token delimiter
     \return vector containing found tokens */
-vector<string> splitString ( const string& s, unsigned char delim );
+std::vector<std::string> splitString ( const std::string& s, unsigned char delim );
 
 /** Convert string to a numeric value of the given type
     \param val variable of specified type which will contain the numeric value
@@ -81,13 +79,13 @@ bool str2num ( T &val, const std::string& s, std::ios_base& ( *f ) ( std::ios_ba
     return ! ( iss >> f >> val ).fail();
 }
 
-int calcWeight(const string&s);
+int calcWeight(const std::string&s);
 
-string getPathAcronym(const string&path, char delim);
+std::string getPathAcronym(const std::string&path, char delim);
 
 bool endsWith(std::string const & value, std::string const & ending);
 
-int utf8_strlen(const string& str);
+int utf8_strlen(const std::string& str);
 }
 
 #endif
diff --git src/include/stylecolour.h src/include/stylecolour.h
index 5f28001..e4660ef 100644
--- src/include/stylecolour.h
+++ src/include/stylecolour.h
@@ -33,8 +33,6 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 #include <string>
 
 
-using namespace std;
-
 namespace highlight
 {
 
@@ -56,12 +54,12 @@ public:
         \param green Blue value in hex notation
         \param blue Green value in hex notation
     */
-    Colour ( const string & red, const string & green, const string & blue );
+    Colour ( const std::string & red, const std::string & green, const std::string & blue );
 
     /** Constructor
         \param ColourString String with rgb values
     */
-    Colour ( const string & colourString );
+    Colour ( const std::string & colourString );
 
     Colour();
     ~Colour() {};
@@ -69,31 +67,31 @@ public:
     /** Sets red, green and blue values
       \param ColourString String containing colour attributes
     */
-    void setRGB ( const string & colourString );
+    void setRGB ( const std::string & colourString );
 
     /** Sets red value
         \param red New red value */
-    void setRed ( const string & red );
+    void setRed ( const std::string & red );
 
     /** Sets green value
         \param green New green value */
-    void setGreen ( const string & green );
+    void setGreen ( const std::string & green );
 
     /** Sets blue value
         \param blue New blue value */
-    void setBlue ( const string & blue );
+    void setBlue ( const std::string & blue );
 
     /**  @param type Output type
          @return Red value in color representation according to output type */
-    string getRed ( OutputType type ) const;
+    std::string getRed ( OutputType type ) const;
 
     /**  @param type Output type
          @return Green value in color representation according to output type */
-    string getGreen ( OutputType type ) const;
+    std::string getGreen ( OutputType type ) const;
 
     /**  @param type Output type
          @return Blue value in color representation according to output type */
-    string getBlue ( OutputType type ) const;
+    std::string getBlue ( OutputType type ) const;
 
     /**  @return red value */
     int getRed () const;
@@ -106,8 +104,8 @@ public:
 
 private:
     RGBVal rgb;
-    string int2str ( int, std::ios_base& ( *f ) ( std::ios_base& ) ) const;
-    string float2str ( double ) const;
+    std::string int2str ( int, std::ios_base& ( *f ) ( std::ios_base& ) ) const;
+    std::string float2str ( double ) const;
 };
 
 }
diff --git src/include/svggenerator.h src/include/svggenerator.h
index f05772a..d5b37d3 100644
--- src/include/svggenerator.h
+++ src/include/svggenerator.h
@@ -54,16 +54,16 @@ public:
         \param w page width
         \param h page height
     */
-    void setSVGSize ( const string& w, const string& h );
+    void setSVGSize ( const std::string& w, const std::string& h );
 
 private:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -71,23 +71,23 @@ private:
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
-    string styleDefinitionCache;
-    string width, height;
+    std::string styleDefinitionCache;
+    std::string width, height;
 
-    string getStyleDefinition();
+    std::string getStyleDefinition();
 
-    string getAttributes ( const string &, const ElementStyle & );
+    std::string getAttributes ( const std::string &, const ElementStyle & );
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
-    string getOpenTag ( const string& );
+    std::string getOpenTag ( const std::string& );
 
-    string getKeywordOpenTag ( unsigned int styleID );
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 
     /** @return Newline string */
-    string getNewLine();
+    std::string getNewLine();
 };
 
 }
diff --git src/include/syntaxreader.h src/include/syntaxreader.h
index 4a94453..59a9394 100644
--- src/include/syntaxreader.h
+++ src/include/syntaxreader.h
@@ -46,20 +46,17 @@ along with Highlight.  If not, see <http://www.gnu.org/licenses/>.
 
 #define GLOBAL_SR_INSTANCE_NAME "HL_SRInstance"
 
-using namespace std;
-
-
 namespace highlight
 {
 class RegexElement;
 
 /** maps keywords and the corresponding class IDs*/
-typedef map <string, int> KeywordMap;
+typedef std::map <std::string, int> KeywordMap;
 
 /** maps embedded language names to exit delimiter regexes*/
-typedef map <string, string> DelimiterMap;
+typedef std::map <std::string, std::string> DelimiterMap;
 
-typedef map <string, bool> AllowInnerSectionsMap;
+typedef std::map <std::string, bool> AllowInnerSectionsMap;
 
 
 /**\brief Contains specific data of the programming language being processed.
@@ -83,23 +80,23 @@ public:
         \param pluginReadFilePath path to file which is read by plugin
         \param outputType output format
         \return LoadResult  */
-    LoadResult load( const string& langDefPath, const string& pluginReadFilePath,  OutputType outputType );
+    LoadResult load( const std::string& langDefPath, const std::string& pluginReadFilePath,  OutputType outputType );
 
     /** \return True if the next load() call would load a new language definition
         \param  langDefPath Path to language definition  */
-    bool needsReload ( const string &langDefPath ) const
+    bool needsReload ( const std::string &langDefPath ) const
     {
         return currentPath!=langDefPath;
     }
 
     /** \return Failed regular expression */
-    string getFailedRegex() const
+    std::string getFailedRegex() const
     {
         return regexErrorMsg;
     }
 
     /** \return Failed Lua exception description */
-    string getLuaErrorText() const
+    std::string getLuaErrorText() const
     {
         return luaErrorMsg;
     }
@@ -130,11 +127,11 @@ public:
 
     /** \param s String
          \return true if s is not a known keyword */
-    bool isKeyword ( const string &s ) ;
+    bool isKeyword ( const std::string &s ) ;
 
     /** \param s String
          \return keyword list group id */
-    int getKeywordListGroup ( const string &s );
+    int getKeywordListGroup ( const std::string &s );
 
     /** \return True if multi line comments may be nested */
     bool allowNestedMLComments() const
@@ -167,19 +164,19 @@ public:
     }
 
     /** \return keyword classes*/
-    const vector<string>& getKeywordClasses() const
+    const std::vector<std::string>& getKeywordClasses() const
     {
         return keywordClasses;
     }
 
     /** \return regular expressions */
-    const vector<RegexElement*>& getRegexElements() const
+    const std::vector<RegexElement*>& getRegexElements() const
     {
         return regex;
     }
 
     /** \return list of Lua code snippets to be stored on disk */
-    const vector<string>& getPersistentSnippets() const
+    const std::vector<std::string>& getPersistentSnippets() const
     {
         return persistentSnippets;
     }
@@ -191,31 +188,31 @@ public:
     }
 
     /** \return list of format override flags defined in syntax definitions */
-    vector<int>& getOverrideStyleAttributes()
+    std::vector<int>& getOverrideStyleAttributes()
     {
         return overrideStyles;
     }
 
     /** \return description of the programming language */
-    const string & getDescription () const
+    const std::string & getDescription () const
     {
         return langDesc;
     }
 
-    const string & getCategoryDescription() const
+    const std::string & getCategoryDescription() const
     {
         return categories;
     }
 
 
     /** \return header string defined by a plug-in */
-    const string & getHeaderInjection () const
+    const std::string & getHeaderInjection () const
     {
         return headerInjection;
     }
 
     /** \return footer string defined by a plug-in */
-    const string & getFooterInjection () const
+    const std::string & getFooterInjection () const
     {
         return footerInjection;
     }
@@ -241,7 +238,7 @@ public:
                      \param s State of delimiter
          \return delimiter ID
      */
-    int getOpenDelimiterID ( const string& token, State s);
+    int getOpenDelimiterID ( const std::string& token, State s);
 
     /**  Pairs of open/close delimiters have a unique ID to test if two tokens act as delimiters
          \param token delimiter token
@@ -249,21 +246,21 @@ public:
                      \param openDelimId opening delimiter retrieved with getOpenDelimiterID
          \return true if delimiter id of token matches openDelimID
      */
-    bool matchesOpenDelimiter ( const string& token, State s, int openDelimId);
+    bool matchesOpenDelimiter ( const std::string& token, State s, int openDelimId);
 
     /** initializes end delimiter regex to switch back to host language
     	\param langPath path of embedded language definition
     */
-    void restoreLangEndDelim(const string&langPath);
+    void restoreLangEndDelim(const std::string&langPath);
 
-    bool allowsInnerSection(const string& langPath);
+    bool allowsInnerSection(const std::string& langPath);
 
     bool requiresTwoPassRun();
 
     bool requiresParamUpdate();
 
 
-    string getPersistentHookConditions();
+    std::string getPersistentHookConditions();
 
     void clearPersistentSnippets();
 
@@ -271,12 +268,12 @@ public:
     	\param lang language definition name  (no path, no ".lang" extension)
     	\return absolute path based on the previously loaded definition
     */
-    string getNewPath(const string& lang);
+    std::string getNewPath(const std::string& lang);
 
     /**
     	\return absolute path of currently loaded definition
     */
-    string getCurrentPath() const
+    std::string getCurrentPath() const
     {
         return currentPath;
     }
@@ -284,7 +281,7 @@ public:
     /**
     	\return encoding which is normally used for input files of this syntax
     */
-    string getEncodingHint() const
+    std::string getEncodingHint() const
     {
         return encodingHint;
     }
@@ -292,7 +289,7 @@ public:
      /**
     	\return test function
     */
-    string getOverrideConfigVal(const string& name) const
+    std::string getOverrideConfigVal(const std::string& name) const
     {
         return pluginConfigOverride.count(name) ? pluginConfigOverride[name] : "";
     }
@@ -347,20 +344,20 @@ public:
     /**
     	\param fn name of the processed input file
     */
-    void setInputFileName(const string& fn) { currentInputFile=fn; }
+    void setInputFileName(const std::string& fn) { currentInputFile=fn; }
 
     /**
     	\return name of the processed input file
     */
 
-    string getInputFileName() const { return currentInputFile; }
+    std::string getInputFileName() const { return currentInputFile; }
 
     /**
     	\param groupID keyword group to be stored on disk
     	\param kw keyword token to be stored on disk
     */
 
-    void addPersistentKeyword(unsigned int groupID, const string& kw);
+    void addPersistentKeyword(unsigned int groupID, const std::string& kw);
 
     /**
     	\param groupID keyword group to be stored on disk
@@ -369,14 +366,14 @@ public:
     	\param lineNumber line number
     	\param fileName file name of processed file containing the line
     	*/
-    void addPersistentStateRange(unsigned int groupID, unsigned int column,unsigned int length, unsigned int lineNumber, const string& fileName);
+    void addPersistentStateRange(unsigned int groupID, unsigned int column,unsigned int length, unsigned int lineNumber, const std::string& fileName);
 
     /**
         \param ls Lua state to be initialized with constants
         \param langDefPath absolute path of language definition
         \param pluginReadFilePath absolute path of plugin input file
     */
-    static void initLuaState(Diluculum::LuaState& ls, const string& langDefPath, const string& pluginReadFilePath, OutputType outputType=HTML );
+    static void initLuaState(Diluculum::LuaState& ls, const std::string& langDefPath, const std::string& pluginReadFilePath, OutputType outputType=HTML );
 
     // generate a keyword class
     unsigned int generateNewKWClass ( int classID, const char *prefix="kw" );
@@ -385,32 +382,32 @@ public:
 
 private:
 
-    static const string REGEX_IDENTIFIER;
-    static const string REGEX_NUMBER;
-    static const string REGEX_ESCSEQ;
+    static const std::string REGEX_IDENTIFIER;
+    static const std::string REGEX_NUMBER;
+    static const std::string REGEX_ESCSEQ;
 
     // path to loaded language definition
-    string currentPath;
+    std::string currentPath;
 
     // name of file being processed
-    string currentInputFile;
+    std::string currentInputFile;
 
     // Language description
-    string langDesc, categories, encodingHint;
+    std::string langDesc, categories, encodingHint;
 
-    string headerInjection, footerInjection;
+    std::string headerInjection, footerInjection;
 
-    string regexErrorMsg, luaErrorMsg;
+    std::string regexErrorMsg, luaErrorMsg;
 
     KeywordMap keywords;
 
-    vector <string> keywordClasses;
-    static vector <string> persistentSnippets;
-    static set <string> persistentSyntaxDescriptions;
+    std::vector <std::string> keywordClasses;
+    static std::vector <std::string> persistentSnippets;
+    static std::set <std::string> persistentSyntaxDescriptions;
 
-    vector <RegexElement*> regex;
+    std::vector <RegexElement*> regex;
 
-    vector <int>overrideStyles;
+    std::vector <int>overrideStyles;
 
     // collect delimiters or get current delimiter in CodeGenerator::loadEmbeddedLang
     static DelimiterMap nestedStateEndDelimiters;
@@ -420,11 +417,11 @@ private:
     static AllowInnerSectionsMap allowInnerSections;
 
     // saves if delimiter pair consists of the same delimiter symbol
-    map <int, bool> delimiterDistinct;
+    std::map <int, bool> delimiterDistinct;
 
-    map <int, bool> rawStringOpenDelims;
+    std::map <int, bool> rawStringOpenDelims;
 
-    map <int, int> matchingDelimiters;
+    std::map <int, int> matchingDelimiters;
 
     // keywords are not case sensitive if set
     bool ignoreCase,
@@ -465,11 +462,11 @@ private:
 
 
 
-    void addKeyword(unsigned int groupID, const string& kw);
+    void addKeyword(unsigned int groupID, const std::string& kw);
 
-    void removeKeyword(const string& kw);
+    void removeKeyword(const std::string& kw);
 
-    void overrideParam(const string& name, const string& val);
+    void overrideParam(const std::string& name, const std::string& val);
 
 
     // Functions accessible in Lua State
@@ -478,7 +475,7 @@ private:
 
     Diluculum::LuaState* luaState; // make member to allow interaction with codeparser instance
 
-    static vector<Diluculum::LuaFunction*> pluginChunks;
+    static std::vector<Diluculum::LuaFunction*> pluginChunks;
 };
 
 }
diff --git src/include/texgenerator.h src/include/texgenerator.h
index 76fe259..4404922 100644
--- src/include/texgenerator.h
+++ src/include/texgenerator.h
@@ -57,10 +57,10 @@ private:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
@@ -68,23 +68,23 @@ private:
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
-    string styleDefinitionCache;
+    std::string styleDefinitionCache;
 
-    string getStyleDefinition();
+    std::string getStyleDefinition();
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /**\return text formatting attributes in RTF format */
-    string getAttributes ( const string & elemName, const ElementStyle & elem );
+    std::string getAttributes ( const std::string & elemName, const ElementStyle & elem );
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching  sequence to stop element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 
 };
 
diff --git src/include/themereader.h src/include/themereader.h
index e42c640..6475852 100644
--- src/include/themereader.h
+++ src/include/themereader.h
@@ -43,7 +43,7 @@ namespace highlight
 {
 
 /** maps keyword class names and the corresponding formatting information*/
-typedef map <std::string, ElementStyle> KeywordStyles;
+typedef std::map <std::string, ElementStyle> KeywordStyles;
 
 /** \brief Contains information about document formatting properties.
  * @author Andre Simon
@@ -64,7 +64,7 @@ private:
 
     std::vector<Diluculum::LuaFunction*> pluginChunks;
 
-    map<std::string, int> semanticStyleMap;
+    std::map<std::string, int> semanticStyleMap;
 
     bool fileOK, restoreStyles, dirtyAttributes;
 
diff --git src/include/xhtmlgenerator.h src/include/xhtmlgenerator.h
index ee6e317..07739f7 100644
--- src/include/xhtmlgenerator.h
+++ src/include/xhtmlgenerator.h
@@ -57,9 +57,9 @@ private:
 
     /** prints document header
     */
-    string getHeader();
+    std::string getHeader();
 
-    string getHeaderStart ( const string &title );
+    std::string getHeaderStart ( const std::string &title );
 
 };
 
diff --git src/include/xterm256generator.h src/include/xterm256generator.h
index ec6a2ab..7240097 100644
--- src/include/xterm256generator.h
+++ src/include/xterm256generator.h
@@ -64,34 +64,34 @@ private:
 
     /** prints document header
      */
-    string getHeader();
+    std::string getHeader();
 
     /** Prints document footer*/
-    string getFooter();
+    std::string getFooter();
 
     /** Prints document body*/
     void printBody();
 
     /** \return escaped character*/
-    virtual string maskCharacter ( unsigned char );
+    virtual std::string maskCharacter ( unsigned char );
 
     /** initialize tags in specific format according to colouring information provided in DocumentStyle */
     void initOutputTags();
 
     /** @param style associated element style
         @return formatting sequence */
-    string getOpenTag (const ElementStyle &style );
+    std::string getOpenTag (const ElementStyle &style );
 
     /** @param styleID current style ID
         @return matching sequence to begin a new element formatting*/
-    string getKeywordOpenTag ( unsigned int styleID );
+    std::string getKeywordOpenTag ( unsigned int styleID );
 
     /** @param styleID current style ID
         @return matching sequence to close element formatting*/
-    string getKeywordCloseTag ( unsigned int styleID );
+    std::string getKeywordCloseTag ( unsigned int styleID );
 
     /** @return Newline string */
-    string getNewLine();
+    std::string getNewLine();
 
     /** convert an xterm color value (0-253) to 3 unsigned chars rgb
         @param color xterm color
@@ -108,7 +108,7 @@ private:
     // set true if "True Color" escape codes should be used instead of 256 color approximation
     bool use16mColours;
 
-    string canvasColSeq;
+    std::string canvasColSeq;
 
     unsigned int canvasPadding;
 

diff --git src/core/syntaxreader.cpp src/core/syntaxreader.cpp
index 2ad1f91..e36df96 100644
--- src/core/syntaxreader.cpp
+++ src/core/syntaxreader.cpp
@@ -65,8 +65,21 @@ set<string> SyntaxReader::persistentSyntaxDescriptions;
 int RegexElement::instanceCnt=0;
 
 
-SyntaxReader::SyntaxReader() 
-    
+SyntaxReader::SyntaxReader() :
+  ignoreCase ( false ),
+  disableHighlighting ( false ),
+  allowNestedComments ( true ),
+  reformatCode ( false ),
+  assertEqualLength(false),
+  paramsNeedUpdate(false),
+  rawStringPrefix(0),
+  continuationChar(0),
+  keywordCount(0),
+  validateStateChangeFct(nullptr),
+  decorateFct(nullptr),
+  decorateLineBeginFct(nullptr),
+  decorateLineEndFct(nullptr),
+  luaState(nullptr)
 {
 
 }
diff --git src/include/syntaxreader.h src/include/syntaxreader.h
index c4bbc03..59a9394 100644
--- src/include/syntaxreader.h
+++ src/include/syntaxreader.h
@@ -424,29 +424,29 @@ private:
     std::map <int, int> matchingDelimiters;
 
     // keywords are not case sensitive if set
-    bool ignoreCase{ false },
+    bool ignoreCase,
 
          // highlighting is disabled
-         disableHighlighting{ false },
+         disableHighlighting,
 
          // allow nested multi line comment blocks
-         allowNestedComments{ true },
+         allowNestedComments,
 
          // code formatting is enabled if set
-         reformatCode{ false },
+         reformatCode,
 
          // string open and close delimiters must have the same length
-         assertEqualLength{false},
+         assertEqualLength,
 
-         paramsNeedUpdate{false};
+         paramsNeedUpdate;
 
     // character which is prefix of raw string (c#)
-    unsigned char rawStringPrefix{0};
+    unsigned char rawStringPrefix;
 
     //character which continues current style on next line
-    unsigned char continuationChar{0};
+    unsigned char continuationChar;
 
-    int keywordCount{0};
+    int keywordCount;
 
     bool readFlag(const Diluculum::LuaVariable& var) ;
 
@@ -470,10 +470,10 @@ private:
 
 
     // Functions accessible in Lua State
-    Diluculum::LuaFunction* validateStateChangeFct{nullptr};
-    Diluculum::LuaFunction* decorateFct{nullptr}, *decorateLineBeginFct{nullptr}, *decorateLineEndFct{nullptr};
+    Diluculum::LuaFunction* validateStateChangeFct;
+    Diluculum::LuaFunction* decorateFct, *decorateLineBeginFct, *decorateLineEndFct;
 
-    Diluculum::LuaState* luaState{nullptr}; // make member to allow interaction with codeparser instance
+    Diluculum::LuaState* luaState; // make member to allow interaction with codeparser instance
 
     static std::vector<Diluculum::LuaFunction*> pluginChunks;
 };
